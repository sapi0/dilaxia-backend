{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Dilaxia - OpenAPI 3.0",
    "description": "Documento dell'API per il progetto dilaxia dal gruppo 2 di quinta. Verrà aggiornato man mano.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.crihexe.com/dilaxia"
    }
  ],
  "tags": [
    {
      "name": "test",
      "description": "Lista degli endpoint di test mentre aspettiamo che ci spieghino come fare il resto"
    },
    {
      "name": "Eventi",
      "description": "Lista degli endpoint legati agli eventi"
    }
  ],
  "paths": {
    "/test/login": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Login (Test)",
        "description": "Endpoint per il login di test. Funziona solamente utilizzando le credenziali dell'esempio. Essendo solo di test non va a controllare che l'utente esista veramente. Potete comunque utilizzarlo per testare il login con queste credenziali, poi quando implementeremo il login serio utilizzerete credenziali valide con un altro endpoint.",
        "requestBody": {
          "description": "Fornire lo schema dell'utente con email e password DELL'ESEMPIO, altrimenti non funziona",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "sapio.andrea@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Aldini2017!!"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Il login è andato a buon fine.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Andrea"
                    },
                    "surname": {
                      "type": "string",
                      "example": "Sapio"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Schema non valido (avete sbagliato il json nel body. Controllate che le chiavi siano giuste)"
          },
          "499": {
            "description": "Email o password non valida. Se vi esce questo errore VI RICORDO CHE DOVETE UTILIZZARE LE CREDENZIALI DELL'ESEMPIO QUI SOPRA"
          }
        }
      }
    },
    "/test/register": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Registrazione (Test)",
        "description": "Endpoint per la registrazione di test. In questo caso funziona con qualsiasi dato inserito, a patto che sia valido secondo alcune specifiche descritte tra gli errori e le responses. Ovviamente essendo di test, l'utente non verrà registrato nel database, infatti non potrete utilizzarlo per il login.",
        "requestBody": {
          "description": "Lo schema della registrazione di test. Deve contenere obbligatoriamente tutti e 4 i campi che vedi nell'esempio. I valori possono essere cambiati, non devono essere come nell'esempio, ma devono comunque rispettare le regole per ogni campo. (Per esempio l'email deve essere valida con una @, ecc...) Vedi bene tra le responses e gli errori",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Andrea"
                  },
                  "surname": {
                    "type": "string",
                    "example": "Sapio"
                  },
                  "email": {
                    "type": "string",
                    "example": "sapio.andrea@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Aldini2017!!"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "La registrazione è andata a buon fine. In questo caso essendo di test in realtà non viene registrato alcun utente, ma questa risposta assicura che in un contesto reale avrebbe funzionato. La risposta consiste nei dati che sono stati registrati.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Andrea"
                    },
                    "surname": {
                      "type": "string",
                      "example": "Sapio"
                    },
                    "email": {
                      "type": "string",
                      "example": "sapio.andrea@gmail.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "Aldini2017!!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Schema non valido (avete sbagliato il json nel body. Controllate che le chiavi siano giuste)"
          },
          "496": {
            "description": "Nome non valido (1 <= length < 50. Solo lettere A-Z_a-z e spazi)"
          },
          "497": {
            "description": "Cognome non valido (1 <= length < 50. Solo lettere A-Z_a-z e spazi)"
          },
          "498": {
            "description": "Email non valida (5 < length < 100. Deve essere valido. Regex -> \\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* )"
          },
          "499": {
            "description": "Password non valida (8 <= length < 50. Almeno una maiuscola e una minuscola, almeno un numero e un carattere speciale)"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["Eventi"],
        "summary": "Lista di eventi",
        "description": "Ottieni la lista completa di tutti i prossimi eventi.",
        "parameters": [
          {
            "name": "showPast",
            "description": "Utilizzato per ottenere insieme agli eventi futuri anche quelli ormai finiti.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "description": "Utilizzato per dare un numero massimo di eventi mostrati per chiamata a questo endpoint. Serve a migliorare le performance. Con molti eventi da visualizzare si usa in combinazione con il parametro \"page\"",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Utilizzato per mostrare una certa pagina contenente \"pageSize\" eventi.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Viene ritornato un oggetto evento",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "500": {
            "description": "Errore sconosciuto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/event/{id}": {
      "get": {
        "tags": ["Eventi"],
        "summary": "Informazioni su un evento con ID",
        "description": "Ottieni tutte le informazioni riguardanti un determinato evento sapendo il suo ID univoco.",
        "parameters": [
          {
            "name": "id",
            "description": "L'ID univoco di un evento.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Viene ritornato un oggetto evento",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "500": {
            "description": "Errore sconosciuto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Eventi"],
        "summary": "Modifica un evento con ID",
        "description": "Modifica le informazioni riguardanti un determinato evento esistente sapendo il suo ID univoco.",
        "parameters": [
          {
            "name": "id",
            "description": "L'ID univoco di un evento.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Viene ritornato un oggetto evento. Contiene tutti i dati dell'evento modificato. Equivale a GET /event/{id}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "500": {
            "description": "Errore sconosciuto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Eventi"],
        "summary": "Elimina un evento con ID",
        "description": "Elimina un determinato evento sapendo il suo ID univoco.",
        "parameters": [
          {
            "name": "id",
            "description": "L'ID univoco di un evento.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Viene ritornato un oggetto evento contenente l'evento che è stato appena eliminato. Equivale a GET /event/{id}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "500": {
            "description": "Errore sconosciuto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/event": {
      "post": {
        "tags": ["Eventi"],
        "summary": "Crea un nuovo evento",
        "description": "Crea un nuovo evento inserendo tutte le informazioni su di essso. Ricorda che solo i docenti possono crearne uno.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Viene ritornato un oggetto evento. Contiene tutti i dati dell'evento modificato. Equivale a GET /event/{id}",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "500": {
            "description": "Errore sconosciuto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginTestRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "sapio.andrea@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "Aldini2017!!"
          }
        }
      },
      "LoginTestResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Andrea"
          },
          "surname": {
            "type": "string",
            "example": "Sapio"
          }
        }
      },
      "RegisterTest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Andrea"
          },
          "surname": {
            "type": "string",
            "example": "Sapio"
          },
          "email": {
            "type": "string",
            "example": "sapio.andrea@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "Aldini2017!!"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {

        }
      },
      "EventUpdate": {
        "type": "object",
        "properties": {

        }
      },
      "EventCreate": {
        "type": "object",
        "properties": {

        }
      },
      "DefaultError": {
        "type": "object",
        "properties": {

        }
      }
    }
  }
}